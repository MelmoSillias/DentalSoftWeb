{% extends 'base.html.twig' %}

{% block title %}Bienvenue sur DentalSoft!{% endblock %}

{% block stylesheets %}
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css"/>
    <style>
        body {
            background-color: #fff;
            position: relative;
            overflow-x: hidden;
        }
        #bgCanvas {
            position: fixed;
            top: 0;
            left: 0;
            z-index: -1;
            width: 100%;
            height: 100%;
        }
    </style>
{% endblock %}

{% block body %}
<canvas id="bgCanvas"></canvas>

<div class="container text-center mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8 animate__animated animate__fadeInDown">
            <h1 class="display-4 fw-bold text-dark">Bienvenue sur DentalSoft</h1>
            <p class="lead text-secondary">Une solution compl√®te pour la gestion des cabinets dentaires.</p>

            <div class="my-4">
                <img src="{{ asset('img/logo.png') }}" class="img-fluid rounded shadow-lg animate__animated animate__zoomIn" alt="Illustration DentalSoft">
            </div>

            <a href="{{ url('app_login') }}" class="btn btn-primary btn-lg btn-custom animate__animated animate__pulse animate__infinite">
                Se connecter
            </a>
        </div>
    </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const canvas = document.getElementById('bgCanvas');
    const ctx = canvas.getContext('2d');
    let particles = [];
    const particleCount = 50;
    const maxSpeed = 2;
    let mouseX = window.innerWidth / 2;
    let mouseY = window.innerHeight / 2;

    function resizeCanvas() {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    document.addEventListener('mousemove', function(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
    });

    function Particle(x, y) {
        this.x = x;
        this.y = y;
        this.size = Math.random() * 3 + 1;
        this.speedX = Math.random() * maxSpeed - maxSpeed / 2;
        this.speedY = Math.random() * maxSpeed - maxSpeed / 2;
    }

    Particle.prototype.update = function() {
        this.x += this.speedX;
        this.y += this.speedY;
        // Rebonds aux bords du canvas
        if (this.x < 0 || this.x > canvas.width) this.speedX = -this.speedX;
        if (this.y < 0 || this.y > canvas.height) this.speedY = -this.speedY;
    };

    Particle.prototype.draw = function() {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
        ctx.fillStyle = 'rgba(0, 0, 0, 0.5)';
        ctx.fill();
    };

    for (let i = 0; i < particleCount; i++) {
        particles.push(new Particle(Math.random() * canvas.width, Math.random() * canvas.height));
    }

    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        particles.forEach(particle => {
            particle.update();
            particle.draw();

            const dist = Math.hypot(particle.x - mouseX, particle.y - mouseY);
            if (dist < 150) {
                ctx.beginPath();
                ctx.moveTo(mouseX, mouseY);
                ctx.lineTo(particle.x, particle.y);
                ctx.strokeStyle = 'rgba(0, 0, 0, ' + (1 - dist / 150) + ')';
                ctx.stroke();
            }
        });

        requestAnimationFrame(animate);
    }
    animate();
});
</script>
{% endblock %}
